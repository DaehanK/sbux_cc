/* COMMON */
body{
  color : #333333; 
  /* 333333 == 333 */
  font-size:16px;
  font-weight: 400;
  line-height: 1.4;
  font-family: 'Nanum Gothic', sans-serif;
  /* height: 3000px;  작업을 위해 추가했던거임. */
}

img{
  /* img는 원래 inline 요소임 그래서 baseline을 기준으로 아랫쪽에 약간의 공간을 갖음. 그래서 아래 여백이 발생 -> 이걸 block으로 변경하면 사라짐. */
  display:block;
}

a{
  /* a tag에 기본으로 깔려있는 밑줄을 지우기위해 사용! */
  text-decoration:none;
}

.inner {
  width: 1100px;
  margin: 0 auto;
  /* auto를 넣으면서 가운데 정렬 시켜줌. */
  position:relative;
}

.btn{
  width: 130px;
  padding:10px;
  border: 2px solid #333;
  border-radius:4px;
  color:#333;
  font-size:16px;
  font-weight: 700;
  cursor: pointer;
  box-sizing: border-box;
  display:block;
  /* a tag , span tag에 btn을 넣었을때도 정상적으로 모양이 나오려면 block 속성을 넣어야한다? */
  transition : .4s;
  text-align:center;
}
.btn:hover{
  background-color:#333;
  color:#fff;
}
.btn.btn--reverse{
  background-color:#333;
  color:#fff;
}
.btn.btn--reverse:hover{
  background-color: transparent;
  color: #333;
}
.btn.btn--brown{
  color:#592b18;
  border-color:#592b18;
}

.btn.btn--brown:hover{
  color:#fff;
  background-color: #592b18;
}

.btn.btn--gold{
  color:#d9aa8a;
  border-color:#d9aa8a;
}
.btn.btn--gold:hover{
  color:#fff;
  background-color:#d0aa8a;
  border-color:#d9aa8a;
}
.btn.btn--white{
  color:#fff;
  border-color: #ffffff;
}
.btn.btn--white:hover{
  color:#333;
  background-color: #ffffff;
}

.back-to-position{
  opacity:0;
  transition:1s;
}

.back-to-position.to-right{
  /* 해당 클래스를 가지고 있으면 원래 자리에서 왼쪽으로 이동된 상태 -> 스크롤 내리면 오른쪽으로 움직이는게아니라 원래자리로 돌아오는것. */
  transform:translateX(-150px);
}

.back-to-position.to-left{
  transform:translateX(150px);
}
.show .back-to-position{
  opacity:1;
  transform:translateX(0);
}

/* 모두 다 함께 등장하니까 심심함 : delay를 줄때 사용 */
.show .back-to-position.delay-0{
  transition-delay:0s;
}
.show .back-to-position.delay-1{
  transition-delay:.3s;
}
.show .back-to-position.delay-2{
  transition-delay:.6s;
}
.show .back-to-position.delay-3{
  transition-delay:.9s;
}


/* HEADER */
header{
  background-color:#f6f5f0;
  border-bottom:1px solid #c8c8c8; 
  /* position: relative; */
  position:fixed;
  top:0;
  width:100%;
  z-index:9;
  /* fixed로 설정해주면 width를 최소한으로 설정하려고함(absolute도동일) 그래서 fixed를 주면 여백 주던것들이 사라져서 왼쪽으로 쏠려버림. 
  이때 width를 100%로 넣어주면 다시 가운데정렬처럼 보이게 됨. -> fixed가 되면 header부분이 스크롤을 내려도 항상 유지하게됨.*/
}

header > .inner{
  height: 120px;
  
}
header .logo{
  /* 가운데정렬하려면 Width/ left/ right || height / top/ bottom을 명시해야함.  */
  height: 75px;
  /* 구조적인 부모 요소에 position이 있어야함!  */
  position: absolute;
  top:0;
  bottom:0;
  left:0;
  /* 첫번째 auto : 수직 가운데 / 두번째 auto : 수평 가운데 */
  margin:auto 0;
}

header .sub-menu{
  display:flex;
  position: absolute;
  top:10px;
  right:0;
}


header .sub-menu ul.menu{
/* 수직으로 쌓여있던 li tag들을 수평으로 만들어줌. */
  display:flex;
  font-family: Arial, sans-serif;
}

header .sub-menu ul.menu li{
  position:relative;
}

header .sub-menu ul.menu li::before{
  content: "";
  /* display: block;  -> position absoulte 를 사용하면 display가 block으로 어차피 바뀜 중복!*/
  width: 1px;
  height: 12px;
  background-color: #e5e5e5;
  position : absolute;
  top:0;
  bottom:0;
  margin:auto 0;
}
/* sign in 메뉴 앞에도 구분선이 만들어지니까 이걸 없애기 위해서 사용
첫번째 li tag의 가상 요소 선택자 before 에는 none! */
header .sub-menu ul.menu li:first-child::before{
  display:none;
}

header .sub-menu ul.menu li a{
    /* font size가 작아지면 사용자가 클릭할수있는(사이트이동) 범위가 작아짐. -> 
  padding을 사용해서 키워줄수있다 : 이때 inline 요소인 경우 padding이 먹히지않음 그래서 block으로 변경 */
  font-size:12px;
  padding: 11px 16px;
  display : block;
  color:#656565;
  
}

header .sub-menu ul.menu li a:hover{
  color:#000;
  
}

header .sub-menu .search{
  height: 34px;
  position:relative;
}
/* 홈페이지에서는 돋보기를 누르면 켜졌는데 지금은 input 요소를 눌러야지만 켜짐 -> 이건 JS로 해결가능 
: input이 들어있는 search 아무곳이나 클릭했을때 input이 focus되도록 지정해주면 된다! */
header .sub-menu .search input{
  width: 36px;
  height: 34px;
  padding: 4px 10px;
  border: 1px solid #ccc;
  box-sizing:border-box;
  border-radius:5px;
  outline:none;
  background-color: #ffffff;
  color:#777;
  font-size:12px;
  transition : width .4s;
}

header .sub-menu .search input:focus{
  width: 190px;
  border-color:#669900;
  
}

header .sub-menu .search .material-icons{
  position: absolute;
  /* 24px : material icon의 size임 */
  height: 24px;
  top:0;
  bottom:0;
  right:5px;
  margin:auto;
  transition: .4s;
}

/* 일치선택자! search 이면서 focused인 */
header .sub-menu .search.focused .material-icons{
  opacity:0;
}

header .main-menu {
  display : flex;
  /* for 수평정렬  */
  position : absolute;
  bottom:0;
  right:0;
  z-index:1;
  /* z index는 밑에있는 배너창을 덮기위해서! */
  
}
header .main-menu .item{
  
}
header .main-menu .item .item__name{
  padding:10px 20px 34px 20px;
  font-family : Arial, sans-serif;
  font-size : 13px;

}
/* item contents에도 hover시 동작이 들어가야되기 때문에 item__name에 hover를 추가하는게 아니라 item에 추가해줘야한다.
그럼 item:hover만하지 왜 item:hover item__name을 할까? 차이점은 나중에 블로그 쓸때 해보기 */
header .main-menu .item:hover .item__name{
  background-color: #2c2a29;
  color:#669900;
  border-radius:6px 6px 0px 0px;
}
header .main-menu .item .item__contents{
  width: 100%;
  position:fixed;
  /* fixed : viewport를 기준으로 한다 == 주변 요소에 상관없이 위치하겠다.
  top / bottom 같은  수직 위치값이 없다면 요소의원래 위치를 그대로 사용한다. 그럼 fixed를 기준으로 요소의 원래 위치에 위치한다는 의미라
  drop down 같은 느낌을 줄수있는듯? */
  left:0;
  display:none;
}
header .main-menu .item:hover .item__contents{
  display:block;
}
header .main-menu .item .item__contents .contents__menu{
  background-color:#2c2a29;
  /* height: 200px; 
  화면 배치를 할때는 높이값을 넣었지만 contents를 입력했으니까 높이값이 필요없어짐.
  */
  
  
}
header .main-menu .item .item__contents .contents__menu > ul{
  /* ul 이 여러단계로 들어가니까 > 써서 바로 하위 ul만 선택 */
  display:flex;
  padding:20px 0;
  /* 수평정렬을 위한 flex */
}

header .main-menu .item .item__contents .contents__menu > ul > li{
  width: 220px;

  
}

header .main-menu .item .item__contents .contents__menu > ul > li h4{
  padding: 3px 0 12px 0;
  font-size:14px;
  color:#fff;
}

header .main-menu .item .item__contents .contents__menu > ul > li ul li{
  padding:5px 0;
  font-size:12px;
  color:#999;
  cursor:pointer;
}
header .main-menu .item .item__contents .contents__menu > ul > li ul li:hover{
  color:#669900;
}
header .main-menu .item .item__contents .contents__texture{
  padding:26px 0;
  font-size:12px;
  background-image:url("../images/main_menu_pattern.jpg");
  /* common한건 parent로  
  배경 이미지는 반복!이 기본임.*/
}

header .main-menu .item .item__contents .contents__texture h4{
 color:#999;
 font-weight:700;
}

header .main-menu .item .item__contents .contents__texture p{
 color:#699900;
 margin:4px 0 14px;

}
header .badges{
  position: absolute;
  top:132px;
  right:12px;
}
header .badges .badge{
  border-radius:10px;
  overflow:hidden;
  /* 해당 영역은 radius만 해도 깍이지만 이미지가 더 커서 90도로 보임 그래서 overflow hidden필요! */
  margin-bottom:12px;
  box-shadow: 4px 4px 10px rgba(0,0,0,0.15);
  /* 그림자 주는 거임 이건 따로 공부해야될듯? 이거 쓰면 뭔가 입체감이 생김. */
  cursor:pointer;
  /* pointer 쓰면 손가락모양으로 바뀜. */
}



/* VISUAL */
.visual{
  margin-top:120px;
  /* header의 높이값(header의 inner) */
  background-image:url("../images/visual_bg.jpg");
  background-position: center;
}

.visual .inner{
height: 646px;
}

.visual .title{
  position: absolute;
  top:88px;
  left:-10px;
}

.visual .title .btn{
  position: absolute;
  top:259px;
  left:173px;
  
}
.visual .cup1.image{
  position: absolute;
  bottom:0;
  right:-47px;
}
.visual .cup1.text{
  position: absolute;
  top: 38px;
  right:171px;

}

.visual .cup2.image{
  position: absolute;
  bottom:0;
  right:162px;
}
.visual .cup2.text{
  position: absolute;
  top:321px;
  right:416px;
}

.visual .spoon{
  position: absolute;
  bottom:0;
  left:275px;
}

.visual .fade-in{
  opacity:0;
  /* 투명상태 */
}

/* notice */
.notice{

}
.notice .notice-line{
  position: relative;
}
/* 나중에 정리할때 inner랑 bg left right가 왜 같이 공존하는지 적기. inner는 중앙일뿐임. 끝까지 채울라면 bg가있어야됨 */
.notice .notice-line .bg-left{
  position: absolute;
  /* 부모 요소를 기준으로 하겠다! */
  top : 0;
  left: 0;
  width: 50%;
  height: 100%;
  background-color: #333333;
}
.notice .notice-line .bg-right{
  position: absolute;
  top : 0;
  right: 0;
  width: 50%;
  height: 100%;
  background-color: #f6f5ef;
}
.notice .notice-line .inner{
  height: 62px;
  display:flex;
  /* 이게 늘어나면 어떻게될까? inner가 커지면 부모요소인 notice-line 의 height도 커짐( height를 지정하지않으면 최소로 지정되니까)
  이때 부모가 커지면서 bg-left, right가 같이 커짐 why? height가 100%! 니까 
  inner를 쓰지않게되면 bg-left , right의 height를 %가 아닌 px 등으로 각각 변경해줘야되는 불편함이 있음. */
}

.notice .notice-line .inner .inner__left{
  width: 60%;
  height: 100%;
  background-color: #333333;
  display: flex;
  align-items: center;
  
}
.notice .notice-line .inner .inner__left h2{
  color:#fff;
  font-size:17px;
  font-weight:700;
  margin-right:20px;
}
.notice .notice-line .inner .inner__left .swiper{
  flex-grow:1;
  height: 62px;
  /* 부모요소의 align-items가 추가되면서 높이값이 필요해짐 */
}
.notice .notice-line .inner .inner__left .swiper .swiper-slide{
 height: 62px;
 display: flex;
 /* align-items 쓸라면 flex 해야함 */
 align-items: center;
}
.notice .notice-line .inner .inner__left .swiper .swiper-slide a{
  color:#fff;
}
.notice .notice-line .inner .inner__left .notice-line__more{
  width: 62px;
  height: 62px;
  display: flex;
  /* flex가 없으면 정렬이 될까? */
  justify-content: center;
  align-items: center;
}
.notice .notice-line .inner .inner__left .notice-line__more .material-icons{
  color:#fff;
  font-size:30px;
  
  /* 기본 size : 24px; */
}
.notice .notice-line .inner .inner__right{
  width: 40%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: flex-end;
}
.notice .notice-line .inner .inner__right h2{
  font-size:17px;
  font-weight: 700;
  margin-right:20px;
  
}

.notice .notice-line .inner .inner__right .toggle-promotion{
  width: 62px;
  height: 6px;
  cursor: pointer;
  display:flex;
  justify-content: center;
  align-items: center;
}
.notice .notice-line .inner .inner__right .toggle-promotion .material-icons{
  font-size:30px;

}

.notice .promotion{
  height: 693px;
  background-color: #f6f5ef;
  position: relative;
  transition: height .4s;
  overflow:hidden;
  /* overflow가 없으면 들어잇던 것들이 넘쳐버림. 그래서 사라지는 효과 동작 X 그래서 
  overflow hidden을 통해 넘치는거 없애기! 해야됨. */
}

.notice .promotion.hide{
  height: 0;
}

/* 이게 항상 가운데를 유지?  확대했을때에도 계속 가운데를 유지하도록?*/
.notice .promotion .swiper{
  width: calc(819px * 3 + 20px);
  height: 553px;
  position: absolute;
  top:40px;
  left:50%;
  margin-left: calc( (819px * 3 + 20px)/2 * -1 );
  /* 이놈이 가진 width의 반만큼을 -해주면 항상 가운데에 위치해있음. 
  위치는 50% 지점으로 옮겨놓고 다시 반 만큼을 땡겨와서 항상 가운데에있는것처럼 보인다 ?
  */
}

/* swiper-slid-active : 가운데 있는놈이 갖게되는 class */
.notice .promotion .swiper-slide{
  opacity: .5;
  transition: opacity 1s;
  position: relative;
}
.notice .promotion .swiper-slide-active{
  opacity: 1;
}

.notice .promotion .swiper-slide .btn{
  position: absolute;
  bottom:0;
  left:0;
  right:0;
  margin:auto;
  
}

.notice .promotion .swiper-pagination{
  bottom:40px;
  left:0;
  right:0;
}

.notice .promotion .swiper-pagination .swiper-pagination-bullet{
  background-color:transparent;
  background-image:url("../images/promotion_slide_pager.png");
  width: 12px;
  height: 12px;
  margin-right:6px;
  outline:none;
  /* 선택할때 파랗게되면서 커지는 현상 제거 */
}
.notice .promotion .swiper-pagination .swiper-pagination-bullet:last-child{
  margin-right:0;
  /* 마지막 요소는 마진 필요없으니까  */
}

.notice .promotion .swiper-pagination .swiper-pagination-bullet-active{
  background-image:url("../images/promotion_slide_pager_on.png");

}
/* 동일하면 이렇게 다중 선택자 사용가능. */
.notice .promotion .swiper-button-prev,
.notice .promotion .swiper-button-next{
  width: 42px;  
  height: 42px;
  border:2px solid #333;
  border-radius:50%;
  position: absolute;
  top:300px;
  z-index:1;
  cursor: pointer;
  outline:none;
  transition: .4s;
  /* display:flex; */
}




.notice .promotion .swiper-button-prev{
  left:50%;
  margin-left: -480px;
  color:#333;
}

.notice .promotion .swiper-button-next{
  right:50%;
  margin-right:-480px;
  color:#333;
}

.notice .promotion .swiper-button-prev::after{
  content:"";
}
.notice .promotion .swiper-button-next::after{
  content:"";
}

.notice .promotion .swiper-button-prev:hover,
.notice .promotion .swiper-button-next:hover{
  background-color: #333;
  color:#fff;
}
/* rewards */
.rewards{
  position: relative;
}
.rewards .bg-left{
  width: 50%;
  height: 100%;
  background-color: #272727;
  position: absolute;
  top:0;
  left:0;

}
.rewards .bg-right{
  width: 50%; 
  height: 100%;
  position: absolute;
  top:0;
  right:0;
  background-color: #d5c798;
}
.rewards .inner{
  background-image: url("../images/rewards.jpg");
  height: 241px;
  /* position: relative가 없네? 할수있지만 common쪽 inner에 position relative를 설정해놨음. */
}

/* flex-wrap / grow  공부 필요 */
.rewards .inner .btn-group{
  position: absolute;
  width: 250px;
  display:flex;
  flex-wrap:wrap;
  bottom:24px;
  right:0;
}
.rewards .btn-group .btn.sign-up{
  margin-right:10px;
}

.rewards .btn-group .btn.sign-in{
  width: 110px;
}

.rewards .btn-group .btn.gift{
  margin-top:10px;
  flex-grow:1;
}

/* 그냥 예시 -> 부모의 width가 500px 일때 / 자식요소의 height 속성이 0이고 padding-top:50%를 주게되면 %의 기준은 부모의 width가됨.
-> 유투브 영상같은걸 보여줄때 보통 16:9를 지정함. 그래서 padding-top:56.25% 를 지정해주면 된다. */


/* YOUTUBE */
.youtube{
  position: relative;
  height: 700px;
  overflow:hidden;
  background-color:#333;
  /* 가운데 일부분만 영상을 보여줌. */
}

.youtube .youtube__area{
  width: 1920px;
  background-color: orange;
  position: absolute;
  left:50%;
  margin-left:calc(1920px/-2);
  top:50%;
  margin-top:calc(1920px * 9 / 16 / -2);
}
/* style을 위해 html에 요소를 추가해주기보다는 아래처럼 가상클래스를 만들어서 작업해주는게 좋다. after로 해도 동일하게 동작함.*/
.youtube .youtube__area::before{
  content:"";
  display:block;
  width: 100%;
  height: 0;
  padding-top:56.25%;
}
/* youtube 영상을 출력해주는ㄴ 부분에 cover이미지를 불투명하게 씌워서 그냥 배경 유투브 영상이야~ 같은 느낌을 주기위한 css */
.youtube .youtube__cover{
  background-image: url("../images/video_cover_pattern.png");
  background-color: rgba(0,0,0,0.3);
  position: absolute;
  top:0;
  left:0;
  width: 100%;
  height: 100%;
}

#player{
  width:100%;
  height:100%;
  position: absolute;
  top:0;
  left:0;
}


.youtube .inner{
  height: 700px;
}

.youtube .floating1{
  position: absolute;
  top:50px;
  left:0;
}

.youtube .floating2{
  position: absolute;
  top:350px;
  left:150px;

}

/* 이놈이 짤리는데 짤리는건 나중에 해결.
.youtube .floating3{
  position: absolute;
  bottom:-200px;
  right:0;
} */


/* SEASON PRODUCT */

.season-product{
  background-image: url("../images/season_product_bg.jpg");
}

.season-product .inner{
  height: 400px;
  /* display:flex; */

}
.season-product .floating3{
  position: absolute;
  top:-200px;
  right:0;
}
.season-product .text-group{
  position: absolute;
  right:100px;
  top:110px;
}

.season-product .text-group .title{
  margin-bottom:10px
}


.season-product .text-group .description{
  margin-bottom:15px;
}

.season-product .text-group .more{

}


.reserve-coffee{
  background-image:url("../images/reserve_bg.jpg");
}

.reserve-coffee .inner{
  height: 400px;
}

.reserve-coffee .reserve-logo{
  position: absolute;
  top:110px;
  left:0;
}

.reserve-coffee .text-group{
  position: absolute;
  top:124px;
  left:208px;
}

.reserve-coffee .product{
  position: absolute;
  top:0;
  right:0;
}

.pick-your-favorite{
  background-image:url("../images/favorite_bg.jpg");
  background-repeat:no-repeat;
  background-position: center;
  background-attachment: fixed;
  /* 이미자가 고정 : 스크롤 될때 같이 움직이지 않음. 시간차 애니메이션 효과 ?*/
  background-size:cover;
}

.pick-your-favorite .inner{
  padding: 110px 0;
}

.pick-your-favorite .text-group{
  display:flex;
  width:362px;
  flex-wrap:wrap;  /* 줄바꿈 가능. */
  justify-content: flex-end;/*오른쪽 정렬*/
  margin-left:100px;

}

.pick-your-favorite .text-group .title{
  margin-bottom:40px;
}

.pick-your-favorite .text-group .description{
  margin-bottom:40px;
}
.pick-your-favorite .text-group .btn{

}

/* RESERVE STORE */

.reserve-store{
  background-image:url("../images/reserve_store_bg.jpg");
  background-repeat:no-repeat;
  background-position: center;
  background-attachment: fixed;
  /* 이미자가 고정 : 스크롤 될때 같이 움직이지 않음. 시간차 애니메이션 효과 ?*/
  background-size:cover;
}
.reserve-store .inner{
  height: 600px;
  display:flex;
  justify-content: center; /*수평 */
  align-items: center; /*수직*/
}

.reserve-store .medal{
  width: 334px;
  height: 334px;
  perspective: 300px;
  /* 원금감 */
}
.reserve-store .medal .front,
.reserve-store .medal .back{
  position: absolute;
  width: 334px;
  height: 334px;
  backface-visibility: hidden;
  transition:1s;
}


.reserve-store .medal .front{
  
  /* absolute하게되면 두개가 겹쳐짐 */
  transform: rotateY(0deg);
}
.reserve-store .medal:hover .front{
  transform: rotateY(180deg);
}
.reserve-store .medal .back{
  transform: rotateY(-180deg);
}

.reserve-store .medal:hover .back{
  transform: rotateY(0deg);
}

.reserve-store .medal:hover .back .btn{
  position: absolute;
  left:0;
  right:0;
  top:240px;
  margin:auto;
}


/* FIND THE STORE */
.find-store{
  background-image:url("../images/find_store_bg.jpg");
}

.find-store .inner{
  height: 400px;
}

.find-store .texture1{
  position: absolute;
  top:0;
  left:400px;
}

.find-store .texture2{
  position: absolute;
  bottom:0;
  right:0;
}
.find-store .picture{
  border-radius: 50%;
  /* 50%면 동그라미 */
  box-shadow:2px 2px 8px rgba(0,0,0,.5);
  position: absolute; 
}
.find-store .picture1{
 
  left:0;
  top:-60px;
  border-radius: 50%;
}

.find-store .picture2{
  left:250px;
  top: 150px;
  
}
.find-store .text-group{
  position: absolute; 
  left:550px;
  top:120px;
  
}

.find-store .text-group .title{
  margin-bottom:20px;
}

.find-store .text-group .description{
  margin-bottom:20px;
}

.awards{
  background-color: #272727;
}
.awards .inner{
  padding: 40px 0;
}

.awards .swiper{
  width: 100%;
  height: 40px;
}

/* 동일하면 이렇게 다중 선택자 사용가능. */
.awards .swiper-button-prev,
.awards .swiper-button-next{
  width: 42px;  
  height: 42px;
  border:2px solid #fff;
  border-radius:50%;
  position: absolute;
  /* z-index:1; */
  cursor: pointer;
  outline:none;
  transition: .4s;
  color:#fff;
  
  /* display:flex; */
}


.awards .swiper-button-prev{
  left:-100px;
  
  /* color:#fff; */
}

.awards .swiper-button-next{
  right:-100px;
  
  /* color:#fff; */
}

.awards .swiper-button-prev::after{
  content:"";
}
.awards .swiper-button-next::after{
  content:"";
}

.awards .swiper-button-prev:hover,
.awards .swiper-button-next:hover{
  background-color: #fff;
  color:#333;
}

/* FOOTER */
footer{
 background-color: #272727;
 border-top:1px solid #333;
}

footer .inner{
padding: 40px 0 60px 0;
}

footer .menu{
  /* 수평으로 만들기위해  */
  display:flex;
  justify-content: center;
}

footer .menu li{
  position: relative;
}

footer .menu li::before{
  content:"";
  width: 3px;
  height: 3px;
  /* 인라인 요소는 w h를 따로 갖을수없음 -> 블락 변경필요 */
  background-color: #555555;
  position: absolute;
  /* position absolute 사용시 block으로 알아서 바뀜(before 가상요소는 인라인 요소임)  */
  right:-1px;
  /* 수직 가운데 정렬을 위해 아래처럼 해야함! */
  top:0;
  bottom:0;
  margin: auto;
}

footer .menu li:last-child::before{
  display:none;
}
footer .menu li a{
  color:#fff;
  font-size:12px;
  font-weight: 700;
  padding:15px;
  display:block;
  /* inline 요소는 마진,패딩의 위 아래값을 정상적으로 사용불가능 -> 클릭할수있는 공간이 줄어듬 -> block요소로 변경 (클릭범위를 늘리기위해 하느것) */
}

/* footer .menu li:first-child a{
  color:green;
  margin-right:10px;
} */


footer .menu li a.green{
  color:green;
  margin-right:10px;
}


footer .btn-group{
  margin-top:20px;
  display:flex;
  justify-content: center;
}

footer .btn-group .btn{
  font-size: 12px;
  margin-right:10px;
}

footer .btn-group .btn:last-child{
  margin-right:0;
}

footer .info{
  margin-top:30px;
  text-align:center;

}

footer .info span{
  margin-right:20px;
  color:#999;
  font-size:12px;
}

footer .info span:last-child{
  margin-right:0;
}

footer .copyright{
  color: #999;
  font-size:12px;
  text-align:center;
  margin-top:12px;

}

footer .logo{
  margin: 30px auto 0;
  /* auto로 가운데 정렬을 하려면 width값이 있어야함. 근데 img tag가 display block으로 설정되어있고 margin auto 를 해준다면 가운데 정렬가능! 
  common에서 display block을 설정해줬음.  */
}

#to-top{
  width: 42px;
  height: 42px;
  background-color: #333333;
  color:#fff;
  cursor:pointer;
  border: 2px solid #fff;
  border-radius:10px;
  display:flex;
  justify-content: center;
  align-items: center;
  /* viewpoint를 기준으로 위치시키려고 fixed 사용. 화면 아래에 계속 있으니까 (생겼을떄) */
  position:fixed;
  bottom:30px;
  right:30px;
  z-index:9;

}