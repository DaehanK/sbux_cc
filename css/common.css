/* COMMON */
body{
  color : #333333; 
  /* 333333 == 333 */
  font-size:16px;
  font-weight: 400;
  line-height: 1.4;
  font-family: 'Nanum Gothic', sans-serif;
  /* height: 3000px;  작업을 위해 추가했던거임. */
}

img{
  /* img는 원래 inline 요소임 그래서 baseline을 기준으로 아랫쪽에 약간의 공간을 갖음. 그래서 아래 여백이 발생 -> 이걸 block으로 변경하면 사라짐. */
  display:block;
}

a{
  /* a tag에 기본으로 깔려있는 밑줄을 지우기위해 사용! */
  text-decoration:none;
}

.inner {
  width: 1100px;
  margin: 0 auto;
  /* auto를 넣으면서 가운데 정렬 시켜줌. */
  position:relative;
}

.btn{
  width: 130px;
  padding:10px;
  border: 2px solid #333;
  border-radius:4px;
  color:#333;
  font-size:16px;
  font-weight: 700;
  cursor: pointer;
  box-sizing: border-box;
  display:block;
  /* a tag , span tag에 btn을 넣었을때도 정상적으로 모양이 나오려면 block 속성을 넣어야한다? */
  transition : .4s;
  text-align:center;
}
.btn:hover{
  background-color:#333;
  color:#fff;
}
.btn.btn--reverse{
  background-color:#333;
  color:#fff;
}
.btn.btn--reverse:hover{
  background-color: transparent;
  color: #333;
}
.btn.btn--brown{
  color:#592b18;
  border-color:#592b18;
}

.btn.btn--brown:hover{
  color:#fff;
  background-color: #592b18;
}

.btn.btn--gold{
  color:#d9aa8a;
  border-color:#d9aa8a;
}
.btn.btn--gold:hover{
  color:#fff;
  background-color:#d0aa8a;
  border-color:#d9aa8a;
}
.btn.btn--white{
  color:#fff;
  border-color: #ffffff;
}
.btn.btn--white:hover{
  color:#333;
  background-color: #ffffff;
}

.back-to-position{
  opacity:0;
  transition:1s;
}

.back-to-position.to-right{
  /* 해당 클래스를 가지고 있으면 원래 자리에서 왼쪽으로 이동된 상태 -> 스크롤 내리면 오른쪽으로 움직이는게아니라 원래자리로 돌아오는것. */
  transform:translateX(-150px);
}

.back-to-position.to-left{
  transform:translateX(150px);
}
.show .back-to-position{
  opacity:1;
  transform:translateX(0);
}

/* 모두 다 함께 등장하니까 심심함 : delay를 줄때 사용 */
.show .back-to-position.delay-0{
  transition-delay:0s;
}
.show .back-to-position.delay-1{
  transition-delay:.3s;
}
.show .back-to-position.delay-2{
  transition-delay:.6s;
}
.show .back-to-position.delay-3{
  transition-delay:.9s;
}


/* HEADER */
header{
  background-color:#f6f5f0;
  border-bottom:1px solid #c8c8c8; 
  /* position: relative; */
  position:fixed;
  top:0;
  width:100%;
  z-index:9;
  /* fixed로 설정해주면 width를 최소한으로 설정하려고함(absolute도동일) 그래서 fixed를 주면 여백 주던것들이 사라져서 왼쪽으로 쏠려버림. 
  이때 width를 100%로 넣어주면 다시 가운데정렬처럼 보이게 됨. -> fixed가 되면 header부분이 스크롤을 내려도 항상 유지하게됨.*/
}

header > .inner{
  height: 120px;
  
}
header .logo{
  /* 가운데정렬하려면 Width/ left/ right || height / top/ bottom을 명시해야함.  */
  height: 75px;
  /* 구조적인 부모 요소에 position이 있어야함!  */
  position: absolute;
  top:0;
  bottom:0;
  left:0;
  /* 첫번째 auto : 수직 가운데 / 두번째 auto : 수평 가운데 */
  margin:auto 0;
}

header .sub-menu{
  display:flex;
  position: absolute;
  top:10px;
  right:0;
}


header .sub-menu ul.menu{
/* 수직으로 쌓여있던 li tag들을 수평으로 만들어줌. */
  display:flex;
  font-family: Arial, sans-serif;
}

header .sub-menu ul.menu li{
  position:relative;
}

header .sub-menu ul.menu li::before{
  content: "";
  /* display: block;  -> position absoulte 를 사용하면 display가 block으로 어차피 바뀜 중복!*/
  width: 1px;
  height: 12px;
  background-color: #e5e5e5;
  position : absolute;
  top:0;
  bottom:0;
  margin:auto 0;
}
/* sign in 메뉴 앞에도 구분선이 만들어지니까 이걸 없애기 위해서 사용
첫번째 li tag의 가상 요소 선택자 before 에는 none! */
header .sub-menu ul.menu li:first-child::before{
  display:none;
}

header .sub-menu ul.menu li a{
    /* font size가 작아지면 사용자가 클릭할수있는(사이트이동) 범위가 작아짐. -> 
  padding을 사용해서 키워줄수있다 : 이때 inline 요소인 경우 padding이 먹히지않음 그래서 block으로 변경 */
  font-size:12px;
  padding: 11px 16px;
  display : block;
  color:#656565;
  
}

header .sub-menu ul.menu li a:hover{
  color:#000;
  
}

header .sub-menu .search{
  height: 34px;
  position:relative;
}
/* 홈페이지에서는 돋보기를 누르면 켜졌는데 지금은 input 요소를 눌러야지만 켜짐 -> 이건 JS로 해결가능 
: input이 들어있는 search 아무곳이나 클릭했을때 input이 focus되도록 지정해주면 된다! */
header .sub-menu .search input{
  width: 36px;
  height: 34px;
  padding: 4px 10px;
  border: 1px solid #ccc;
  box-sizing:border-box;
  border-radius:5px;
  outline:none;
  background-color: #ffffff;
  color:#777;
  font-size:12px;
  transition : width .4s;
}

header .sub-menu .search input:focus{
  width: 190px;
  border-color:#669900;
  
}

header .sub-menu .search .material-icons{
  position: absolute;
  /* 24px : material icon의 size임 */
  height: 24px;
  top:0;
  bottom:0;
  right:5px;
  margin:auto;
  transition: .4s;
}

/* 일치선택자! search 이면서 focused인 */
header .sub-menu .search.focused .material-icons{
  opacity:0;
}

header .main-menu {
  display : flex;
  /* for 수평정렬  */
  position : absolute;
  bottom:0;
  right:0;
  z-index:1;
  /* z index는 밑에있는 배너창을 덮기위해서! */
  
}
header .main-menu .item{
  
}
header .main-menu .item .item__name{
  padding:10px 20px 34px 20px;
  font-family : Arial, sans-serif;
  font-size : 13px;

}
/* item contents에도 hover시 동작이 들어가야되기 때문에 item__name에 hover를 추가하는게 아니라 item에 추가해줘야한다.
그럼 item:hover만하지 왜 item:hover item__name을 할까? 차이점은 나중에 블로그 쓸때 해보기 */
header .main-menu .item:hover .item__name{
  background-color: #2c2a29;
  color:#669900;
  border-radius:6px 6px 0px 0px;
}
header .main-menu .item .item__contents{
  width: 100%;
  position:fixed;
  /* fixed : viewport를 기준으로 한다 == 주변 요소에 상관없이 위치하겠다.
  top / bottom 같은  수직 위치값이 없다면 요소의원래 위치를 그대로 사용한다. 그럼 fixed를 기준으로 요소의 원래 위치에 위치한다는 의미라
  drop down 같은 느낌을 줄수있는듯? */
  left:0;
  display:none;
}
header .main-menu .item:hover .item__contents{
  display:block;
}
header .main-menu .item .item__contents .contents__menu{
  background-color:#2c2a29;
  /* height: 200px; 
  화면 배치를 할때는 높이값을 넣었지만 contents를 입력했으니까 높이값이 필요없어짐.
  */
  
  
}
header .main-menu .item .item__contents .contents__menu > ul{
  /* ul 이 여러단계로 들어가니까 > 써서 바로 하위 ul만 선택 */
  display:flex;
  padding:20px 0;
  /* 수평정렬을 위한 flex */
}

header .main-menu .item .item__contents .contents__menu > ul > li{
  width: 220px;

  
}

header .main-menu .item .item__contents .contents__menu > ul > li h4{
  padding: 3px 0 12px 0;
  font-size:14px;
  color:#fff;
}

header .main-menu .item .item__contents .contents__menu > ul > li ul li{
  padding:5px 0;
  font-size:12px;
  color:#999;
  cursor:pointer;
}
header .main-menu .item .item__contents .contents__menu > ul > li ul li:hover{
  color:#669900;
}
header .main-menu .item .item__contents .contents__texture{
  padding:26px 0;
  font-size:12px;
  background-image:url("../images/main_menu_pattern.jpg");
  /* common한건 parent로  
  배경 이미지는 반복!이 기본임.*/
}

header .main-menu .item .item__contents .contents__texture h4{
 color:#999;
 font-weight:700;
}

header .main-menu .item .item__contents .contents__texture p{
 color:#699900;
 margin:4px 0 14px;

}
header .badges{
  position: absolute;
  top:132px;
  right:12px;
}
header .badges .badge{
  border-radius:10px;
  overflow:hidden;
  /* 해당 영역은 radius만 해도 깍이지만 이미지가 더 커서 90도로 보임 그래서 overflow hidden필요! */
  margin-bottom:12px;
  box-shadow: 4px 4px 10px rgba(0,0,0,0.15);
  /* 그림자 주는 거임 이건 따로 공부해야될듯? 이거 쓰면 뭔가 입체감이 생김. */
  cursor:pointer;
  /* pointer 쓰면 손가락모양으로 바뀜. */
}

/* FOOTER */
footer{
  background-color: #272727;
  border-top:1px solid #333;
 }
 
 footer .inner{
 padding: 40px 0 60px 0;
 }
 
 footer .menu{
   /* 수평으로 만들기위해  */
   display:flex;
   justify-content: center;
 }
 
 footer .menu li{
   position: relative;
 }
 
 footer .menu li::before{
   content:"";
   width: 3px;
   height: 3px;
   /* 인라인 요소는 w h를 따로 갖을수없음 -> 블락 변경필요 */
   background-color: #555555;
   position: absolute;
   /* position absolute 사용시 block으로 알아서 바뀜(before 가상요소는 인라인 요소임)  */
   right:-1px;
   /* 수직 가운데 정렬을 위해 아래처럼 해야함! */
   top:0;
   bottom:0;
   margin: auto;
 }
 
 footer .menu li:last-child::before{
   display:none;
 }
 footer .menu li a{
   color:#fff;
   font-size:12px;
   font-weight: 700;
   padding:15px;
   display:block;
   /* inline 요소는 마진,패딩의 위 아래값을 정상적으로 사용불가능 -> 클릭할수있는 공간이 줄어듬 -> block요소로 변경 (클릭범위를 늘리기위해 하느것) */
 }
 
 /* footer .menu li:first-child a{
   color:green;
   margin-right:10px;
 } */
 
 
 footer .menu li a.green{
   color:green;
   margin-right:10px;
 }
 
 
 footer .btn-group{
   margin-top:20px;
   display:flex;
   justify-content: center;
 }
 
 footer .btn-group .btn{
   font-size: 12px;
   margin-right:10px;
 }
 
 footer .btn-group .btn:last-child{
   margin-right:0;
 }
 
 footer .info{
   margin-top:30px;
   text-align:center;
 
 }
 
 footer .info span{
   margin-right:20px;
   color:#999;
   font-size:12px;
 }
 
 footer .info span:last-child{
   margin-right:0;
 }
 
 footer .copyright{
   color: #999;
   font-size:12px;
   text-align:center;
   margin-top:12px;
 
 }
 
 footer .logo{
   margin: 30px auto 0;
   /* auto로 가운데 정렬을 하려면 width값이 있어야함. 근데 img tag가 display block으로 설정되어있고 margin auto 를 해준다면 가운데 정렬가능! 
   common에서 display block을 설정해줬음.  */
 }
 